//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.UnitySim
{
    [Serializable]
    public class TrialInfoMsg : Message
    {
        public const string k_RosMessageName = "unity_sim/TrialInfo";
        public override string RosMessageName => k_RosMessageName;

        //  Message containing the information of running a single A-B navigation trial
        public Std.HeaderMsg header;
        //  Information about the current interaction
        public BuiltinInterfaces.TimeMsg trial_start;
        //  When did we start tracking metrics for this trial
        public double timeout_time;
        //  How long is allowed for the episode have to complete?
        public string trial_name;
        //  Which trial name are we running
        public ushort trial_number;
        //  Which trial number are we running
        public uint num_actors;
        //  How many people in the scene?
        //  Robot start / goal locations
        public Geometry.PoseMsg robot_start;
        public Geometry.PoseMsg robot_goal;
        //  Robot location / distance relative to start / goal
        public double dist_to_target;
        //  Current distance to target
        public double min_dist_to_target;
        //  Closest difference to the target the robot has come
        public Geometry.PoseMsg[] robot_poses;
        //  Poses of the robot over the episode
        public BuiltinInterfaces.TimeMsg[] robot_poses_ts;
        //  Timestamps of the robot poses over the episode
        //  Robot location relative to pedestrians
        public double min_dist_to_ped;
        //  Minimum distance to any pedestrian throughout the trial
        //  Collisions between robots and people
        public uint robot_on_person_intimate_dist_violations;
        //  Robot passes w/in the intimate distance of a pedestrian
        public uint person_on_robot_intimate_dist_violations;
        //  A person passes w/in the intimate distance of the robot
        public uint robot_on_person_personal_dist_violations;
        //  Robot passes w/in the personal distance of a pedestrian
        public uint person_on_robot_personal_dist_violations;
        //  A person passes w/in the personal distance of the robot
        public uint robot_on_person_collisions;
        //  Number of times that the robot collided with a person
        public uint person_on_robot_collisions;
        //  Number of times that a person collided with the robot
        //  Collisions w/ static objects
        public uint obj_collisions;
        //  Number of times that the robot collided with a static object
        //  Computed post-hoc
        // bool                     completed                                      # was the robots finals distance to the goal within the desired distance?
        // float64                  targ_dist_norm                                 # dist_to_target normalized by path length
        public double path_length;
        //  Approximate distance traveled by robot
        // float64                  mean_dist_to_target_not_moving                 # How far away from the target was the robot while not moving
        // bool                     episode_timed_out
        public double path_irregularity;
        // float64                  path_efficiency
        public double time_not_moving;
        //  Seconds the robot was not moving. Computed by checking if the robot moved more than 0.05m since a check the last 1s ago. If not, accumulate the time since the last check.
        public double time_in_personal_space;

        public TrialInfoMsg()
        {
            this.header = new Std.HeaderMsg();
            this.trial_start = new BuiltinInterfaces.TimeMsg();
            this.timeout_time = 0.0;
            this.trial_name = "";
            this.trial_number = 0;
            this.num_actors = 0;
            this.robot_start = new Geometry.PoseMsg();
            this.robot_goal = new Geometry.PoseMsg();
            this.dist_to_target = 0.0;
            this.min_dist_to_target = 0.0;
            this.robot_poses = new Geometry.PoseMsg[0];
            this.robot_poses_ts = new BuiltinInterfaces.TimeMsg[0];
            this.min_dist_to_ped = 0.0;
            this.robot_on_person_intimate_dist_violations = 0;
            this.person_on_robot_intimate_dist_violations = 0;
            this.robot_on_person_personal_dist_violations = 0;
            this.person_on_robot_personal_dist_violations = 0;
            this.robot_on_person_collisions = 0;
            this.person_on_robot_collisions = 0;
            this.obj_collisions = 0;
            this.path_length = 0.0;
            this.path_irregularity = 0.0;
            this.time_not_moving = 0.0;
            this.time_in_personal_space = 0.0;
        }

        public TrialInfoMsg(Std.HeaderMsg header, BuiltinInterfaces.TimeMsg trial_start, double timeout_time, string trial_name, ushort trial_number, uint num_actors, Geometry.PoseMsg robot_start, Geometry.PoseMsg robot_goal, double dist_to_target, double min_dist_to_target, Geometry.PoseMsg[] robot_poses, BuiltinInterfaces.TimeMsg[] robot_poses_ts, double min_dist_to_ped, uint robot_on_person_intimate_dist_violations, uint person_on_robot_intimate_dist_violations, uint robot_on_person_personal_dist_violations, uint person_on_robot_personal_dist_violations, uint robot_on_person_collisions, uint person_on_robot_collisions, uint obj_collisions, double path_length, double path_irregularity, double time_not_moving, double time_in_personal_space)
        {
            this.header = header;
            this.trial_start = trial_start;
            this.timeout_time = timeout_time;
            this.trial_name = trial_name;
            this.trial_number = trial_number;
            this.num_actors = num_actors;
            this.robot_start = robot_start;
            this.robot_goal = robot_goal;
            this.dist_to_target = dist_to_target;
            this.min_dist_to_target = min_dist_to_target;
            this.robot_poses = robot_poses;
            this.robot_poses_ts = robot_poses_ts;
            this.min_dist_to_ped = min_dist_to_ped;
            this.robot_on_person_intimate_dist_violations = robot_on_person_intimate_dist_violations;
            this.person_on_robot_intimate_dist_violations = person_on_robot_intimate_dist_violations;
            this.robot_on_person_personal_dist_violations = robot_on_person_personal_dist_violations;
            this.person_on_robot_personal_dist_violations = person_on_robot_personal_dist_violations;
            this.robot_on_person_collisions = robot_on_person_collisions;
            this.person_on_robot_collisions = person_on_robot_collisions;
            this.obj_collisions = obj_collisions;
            this.path_length = path_length;
            this.path_irregularity = path_irregularity;
            this.time_not_moving = time_not_moving;
            this.time_in_personal_space = time_in_personal_space;
        }

        public static TrialInfoMsg Deserialize(MessageDeserializer deserializer) => new TrialInfoMsg(deserializer);

        private TrialInfoMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.trial_start = BuiltinInterfaces.TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.timeout_time);
            deserializer.Read(out this.trial_name);
            deserializer.Read(out this.trial_number);
            deserializer.Read(out this.num_actors);
            this.robot_start = Geometry.PoseMsg.Deserialize(deserializer);
            this.robot_goal = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.dist_to_target);
            deserializer.Read(out this.min_dist_to_target);
            deserializer.Read(out this.robot_poses, Geometry.PoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.robot_poses_ts, BuiltinInterfaces.TimeMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.min_dist_to_ped);
            deserializer.Read(out this.robot_on_person_intimate_dist_violations);
            deserializer.Read(out this.person_on_robot_intimate_dist_violations);
            deserializer.Read(out this.robot_on_person_personal_dist_violations);
            deserializer.Read(out this.person_on_robot_personal_dist_violations);
            deserializer.Read(out this.robot_on_person_collisions);
            deserializer.Read(out this.person_on_robot_collisions);
            deserializer.Read(out this.obj_collisions);
            deserializer.Read(out this.path_length);
            deserializer.Read(out this.path_irregularity);
            deserializer.Read(out this.time_not_moving);
            deserializer.Read(out this.time_in_personal_space);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.trial_start);
            serializer.Write(this.timeout_time);
            serializer.Write(this.trial_name);
            serializer.Write(this.trial_number);
            serializer.Write(this.num_actors);
            serializer.Write(this.robot_start);
            serializer.Write(this.robot_goal);
            serializer.Write(this.dist_to_target);
            serializer.Write(this.min_dist_to_target);
            serializer.WriteLength(this.robot_poses);
            serializer.Write(this.robot_poses);
            serializer.WriteLength(this.robot_poses_ts);
            serializer.Write(this.robot_poses_ts);
            serializer.Write(this.min_dist_to_ped);
            serializer.Write(this.robot_on_person_intimate_dist_violations);
            serializer.Write(this.person_on_robot_intimate_dist_violations);
            serializer.Write(this.robot_on_person_personal_dist_violations);
            serializer.Write(this.person_on_robot_personal_dist_violations);
            serializer.Write(this.robot_on_person_collisions);
            serializer.Write(this.person_on_robot_collisions);
            serializer.Write(this.obj_collisions);
            serializer.Write(this.path_length);
            serializer.Write(this.path_irregularity);
            serializer.Write(this.time_not_moving);
            serializer.Write(this.time_in_personal_space);
        }

        public override string ToString()
        {
            return "TrialInfoMsg: " +
            "\nheader: " + header.ToString() +
            "\ntrial_start: " + trial_start.ToString() +
            "\ntimeout_time: " + timeout_time.ToString() +
            "\ntrial_name: " + trial_name.ToString() +
            "\ntrial_number: " + trial_number.ToString() +
            "\nnum_actors: " + num_actors.ToString() +
            "\nrobot_start: " + robot_start.ToString() +
            "\nrobot_goal: " + robot_goal.ToString() +
            "\ndist_to_target: " + dist_to_target.ToString() +
            "\nmin_dist_to_target: " + min_dist_to_target.ToString() +
            "\nrobot_poses: " + System.String.Join(", ", robot_poses.ToList()) +
            "\nrobot_poses_ts: " + System.String.Join(", ", robot_poses_ts.ToList()) +
            "\nmin_dist_to_ped: " + min_dist_to_ped.ToString() +
            "\nrobot_on_person_intimate_dist_violations: " + robot_on_person_intimate_dist_violations.ToString() +
            "\nperson_on_robot_intimate_dist_violations: " + person_on_robot_intimate_dist_violations.ToString() +
            "\nrobot_on_person_personal_dist_violations: " + robot_on_person_personal_dist_violations.ToString() +
            "\nperson_on_robot_personal_dist_violations: " + person_on_robot_personal_dist_violations.ToString() +
            "\nrobot_on_person_collisions: " + robot_on_person_collisions.ToString() +
            "\nperson_on_robot_collisions: " + person_on_robot_collisions.ToString() +
            "\nobj_collisions: " + obj_collisions.ToString() +
            "\npath_length: " + path_length.ToString() +
            "\npath_irregularity: " + path_irregularity.ToString() +
            "\ntime_not_moving: " + time_not_moving.ToString() +
            "\ntime_in_personal_space: " + time_in_personal_space.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
